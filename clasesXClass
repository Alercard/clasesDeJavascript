// esta manera de definir clases se conoce como sintaxis sugar
// fue agragado en la ultima version de ECMAScript2015
// Class funcionara como la declaracion por prototipos
class Punto {
  // constructor se llamara cuando se llame a new Punto
  constructor(x, y) {
    this.x = x;
    this.y = y;
    // return this es implicito
  }

  moverEnX(x) {
    this.x += x;
  }

  moverEnY(y) {
    this.y += y;
  }

  distancia(p) {
    const x = this.x - p.x;
    const y = this.y - p.y;

    return Math.sqrt(x * x + y * y);
  }
}

const p1 = new Punto(0, 4);
const p2 = new Punto(3, 0);

console.log(p1.distancia(p2));
console.log(p2.distancia(p1));
p1.moverEnX(10);
console.log(p1.distancia(p2));
p2.moverEnY(-4);
console.log(p1.distancia(p2));

// al igual que con prototype y Object.create, al modificar la clase Punto, se modificaran todas las instancias de la misma
p1.__proto__.moverEnX = function(){ console.log('Funcion en mantenimiento'); };
p2.moverEnX(200);
